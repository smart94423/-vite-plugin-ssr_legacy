export { createHttpResponseObject }
export { createHttpResponseObjectRedirect }
export type { HttpResponse }

import type { GetPageAssets } from './getPageAssets'
import { assert } from '../utils'
import type { HtmlRender } from '../html/renderHtml'
import type { PageConfig } from '../../../shared/page-configs/PageConfig'
import { isErrorPage } from '../../../shared/error-page'
import type { RenderHook } from './executeOnRenderHtmlHook'
import type { StatusCodeAbort, StatusCodeError, UrlRedirect } from '../../../shared/route/abort'
import { getHttpResponseBody, getHttpResponseBodyStreamHandlers, HttpResponseBody } from './getHttpResponseBody'
import { getEarlyHints, type EarlyHint } from './getEarlyHints'

type StatusCode = 200 | 404 | 500 | StatusCodeAbort
type ContentType = 'application/json' | 'text/html;charset=utf-8'
type ResponseHeaders = [string, string][]
type HttpResponse = {
  statusCode: StatusCode
  headers: ResponseHeaders
  earlyHints: EarlyHint[]
  // We don't use @deprecated to avoid TypeScript to remove the JSDoc
  /** **Deprecated**: use `headers` instead, see https://vite-plugin-ssr.com/migration/0.4.23 */
  contentType: ContentType
} & HttpResponseBody
async function createHttpResponseObject(
  htmlRender: null | HtmlRender,
  renderHook: null | RenderHook,
  pageContext: {
    isClientSideNavigation: boolean
    _pageId: null | string
    is404: null | boolean
    errorWhileRendering: null | Error
    __getPageAssets: GetPageAssets
    _pageConfigs: PageConfig[]
    _abortStatusCode?: StatusCodeError
  }
): Promise<HttpResponse | null> {
  if (htmlRender === null) {
    return null
  }
  assert(renderHook || typeof htmlRender === 'string')

  let statusCode: StatusCode | undefined = pageContext._abortStatusCode
  if (!statusCode) {
    const isError = !pageContext._pageId || isErrorPage(pageContext._pageId, pageContext._pageConfigs)
    if (pageContext.errorWhileRendering) {
      assert(isError)
    }
    if (!isError) {
      assert(pageContext.is404 === null)
      statusCode = 200
    } else {
      assert(pageContext.is404 === true || pageContext.is404 === false)
      statusCode = pageContext.is404 ? 404 : 500
    }
  }

  // The `.pageContext.json` HTTP request's body is generated by `@brillout/json-serializer` thus always a string
  assert(!pageContext.isClientSideNavigation || typeof htmlRender === 'string')

  const earlyHints = getEarlyHints(await pageContext.__getPageAssets())

  const contentType = pageContext.isClientSideNavigation ? 'application/json' : 'text/html;charset=utf-8'
  return getHttpResponse(statusCode, contentType, [], htmlRender, earlyHints, renderHook)
}

function createHttpResponseObjectRedirect(pageContext: { _urlRedirect: UrlRedirect }): HttpResponse {
  const { url, statusCode } = pageContext._urlRedirect
  assert(url)
  assert(statusCode)
  assert(300 <= statusCode && statusCode <= 399)
  const headers: ResponseHeaders = [['Location', url]]
  return getHttpResponse(
    statusCode,
    'text/html;charset=utf-8',
    headers,
    `<p style="display: none">Redirecting to ${url}</p>`
  )
}

function getHttpResponse(
  statusCode: StatusCode,
  contentType: ContentType,
  headers: ResponseHeaders,
  htmlRender: HtmlRender,
  earlyHints: EarlyHint[] = [],
  renderHook: null | RenderHook = null
): HttpResponse {
  headers.push(['Content-Type', contentType])

  return {
    statusCode,
    headers,
    contentType, // TODO/v1-release: remove
    earlyHints,
    get body() {
      return getHttpResponseBody(htmlRender, renderHook)
    },
    ...getHttpResponseBodyStreamHandlers(htmlRender, renderHook)
  }
}

/*
 * We create a file `dist/server/package.json` to support ESM users.
 * Otherwise, following error is thrown:
 *   Must use import to load ES Module: dist/server/pageFiles.js
 *   require() of ES modules is not supported.
 *   require() of dist/server/pageFiles.js from node_modules/vite-plugin-ssr/dist/cjs/node/page-files/setup.js is an ES module file as it is a .js file whose nearest parent package.json contains "type": "module" which defines all .js files in that package scope as ES modules.
 * Reproduction: https://github.com/brillout/vite-plugin-ssr-server-import-syntax
 */

export { packageJsonFile }

import type { Plugin } from 'vite'
import type { ModuleFormat } from 'rollup'
import { assert, isSSR_config } from '../utils'

function packageJsonFile(): Plugin {
  let ssr: boolean
  let isEsmOutput: true | null
  return {
    name: 'vite-plugin-ssr:packageJsonFile',
    apply: 'build',
    configResolved(config) {
      ssr = isSSR_config(config)
      isEsmOutput = getIsEsmOutput(config)
    },
    generateBundle(_, bundle) {
      assert([true, false].includes(ssr))
      assert([true, null].includes(isEsmOutput))
      if (!ssr) return
      const fileName = 'package.json'
      if (bundle[fileName]) return // E.g. already generated by Telefunc / vite-plugin-ssr
      this.emitFile({
        fileName,
        type: 'asset',
        source: getPackageJsonContent(isEsmOutput),
      })
    },
  } as Plugin
}

function getPackageJsonContent(isEsmOutput: true | null): string {
  if (isEsmOutput) {
    return `{ "type": "module" }`
  } else {
    return `{ "type": "commonjs" }`
  }
}

function getIsEsmOutput(config: {
  build: { rollupOptions: { output?: { format?: ModuleFormat } | { format?: ModuleFormat }[] } }
}): true | null {
  const { output } = config.build.rollupOptions
  if (!output) {
    return null
  }
  if (Array.isArray(output)) {
    return null
  } else {
    const { format } = output
    if (format === 'es' || format === 'esm' || format === 'module') {
      return true
    }
    assert(
      format === undefined ||
        format === 'amd' ||
        format === 'cjs' ||
        format === 'iife' ||
        format === 'system' ||
        format === 'umd' ||
        format === 'commonjs' ||
        format === 'systemjs',
    )
  }
  return null
}
